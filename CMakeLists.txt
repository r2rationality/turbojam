cmake_minimum_required(VERSION 3.28)
project(TURBOJAM CXX)
set(CMAKE_PROJECT_VERSION_MAJOR 0)
set(CMAKE_PROJECT_VERSION_MINOR 1)
set(CMAKE_PROJECT_VERSION_PATCH 0)
if(PROJECT_SOURCE_DIR STREQUAL PROJECT_BINARY_DIR)
    message(FATAL_ERROR "In-source builds are not allowed")
endif()
if(NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE Release
       CACHE STRING "Choose the type of build: Release Debug Coverage Profile Valgrind."
       FORCE)
endif()
set(COVERAGE_ARGS "" CACHE STRING "select specific unit tests to run for test coverage evaluations")
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_EXTENSIONS NO)
set(CMAKE_CXX_STANDARD_REQUIRED YES)
add_compile_options(-DFMT_HEADER_ONLY)
if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    add_compile_options(-Wall -Wextra -Wthread-safety -fsafe-buffer-usage-suggestions)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    add_compile_options(-Wall -Wextra -Wpedantic)
    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Wno-changes-meaning>)
endif()
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
set(STACK_SIZE "33554432")
add_compile_options(-DDT_STACK_SIZE=${STACK_SIZE})
if (MSVC)
    add_compile_options(/bigobj)
    add_compile_options(/utf-8)
    add_link_options(/Stack:${STACK_SIZE})
    enable_language(ASM_MASM)
endif()
if (MINGW)
    add_compile_options(-Wa)
    add_compile_options(-mbig-obj)
    list(APPEND CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES /mingw64/include)
endif()
if(UNIX)
    add_compile_options(-g)
    add_link_options(-g)
    if(NOT APPLE)
        link_libraries("atomic")
    endif()
endif()
if(CMAKE_BUILD_TYPE STREQUAL Sanitize)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        add_compile_options("-fsanitize=${SANITIZER}")
        add_link_options("-fsanitize=${SANITIZER}")
        add_link_options("-static-libsan")
    endif()
elseif(CMAKE_BUILD_TYPE STREQUAL Sanitize)
    message("Sanitize build")
    if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set(SANITIZER "address")
        add_compile_options(-g)
        add_compile_options(-O3)
        add_compile_options("-fsanitize=${SANITIZER}")
        add_link_options("-fsanitize=${SANITIZER}")
        add_link_options("-static-libsan")
    else()
        message(FATAL_ERROR "Sanitize builds are only supported with Clang")
    endif()
elseif(CMAKE_BUILD_TYPE STREQUAL Fuzzer)
    message("Fuzzer build")
    if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        set(SANITIZER "fuzzer,address")
        add_compile_options(-g)
        add_compile_options(-O3)
        add_compile_options("-fsanitize=${SANITIZER}")
        add_link_options("-fsanitize=${SANITIZER}")
        add_link_options("-static-libsan")
    else()
        message(FATAL_ERROR "Fuzzer builds are only supported with Clang")
    endif()
elseif(CMAKE_BUILD_TYPE STREQUAL Coverage)
    message("Coverage build")
    if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        add_compile_options("-fprofile-instr-generate")
        add_compile_options("-fcoverage-mapping")
        add_compile_options("-g")
        add_compile_options("-O3")
        add_link_options("-fprofile-instr-generate")
        add_link_options("-fcoverage-mapping")
        add_link_options("-g")
        find_program(LLVM_PROFDATA NAMES llvm-profdata llvm-profdata-18 llvm-profdata-17 REQUIRED)
        find_program(LLVM_COV NAMES llvm-cov llvm-cov-18 llvm-cov-17 REQUIRED)
        add_custom_target(coverage
            COMMENT "Running test coverage ..."
            COMMAND $<TARGET_FILE:run-test> ${COVERAGE_ARGS}
            COMMAND echo "Indexing raw profdata"
            COMMAND ${LLVM_PROFDATA} merge -sparse default.profraw -o run-test.profdata
            COMMAND echo "Generating coverage report into tmp/coverage"
            COMMAND ${LLVM_COV} show -show-branches=percent -ignore-filename-regex=lib/dt/cli -ignore-filename-regex=3rdparty/ -format=html -output-dir=tmp/coverage $<TARGET_FILE:run-test> -instr-profile=run-test.profdata
            DEPENDS run-test
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        )
    else()
        message(FATAL_ERROR "Coverage builds are only supported with Clang")
    endif()
endif()

add_subdirectory(3rdparty)
add_subdirectory(lib)
target_link_libraries(lib PUBLIC 3rdparty)

file(GLOB_RECURSE TEST_SRCS lib/*.test.cpp)
add_executable(run-test src/run-test.cpp ${TEST_SRCS})
target_link_libraries(run-test PRIVATE lib 3rdparty)

file(GLOB_RECURSE BENCH_SRCS lib/*.bench.cpp)
add_executable(run-bench src/run-test.cpp ${BENCH_SRCS})
target_link_libraries(run-bench PRIVATE lib 3rdparty)

add_executable(jamsnp-test src/jamsnp-test.cpp)
target_link_libraries(jamsnp-test PRIVATE lib 3rdparty)
